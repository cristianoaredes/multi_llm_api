// This is a placeholder file to demonstrate the structure of the generated API code.
// The actual code would be generated by the swagger_dart_code_generator package.

/// Error response model.
class ApiError {
  final String code;
  final String message;
  
  ApiError({
    required this.code,
    required this.message,
  });
  
  factory ApiError.fromJson(Map<String, dynamic> json) {
    return ApiError(
      code: json['code'] as String? ?? 'UNKNOWN_ERROR',
      message: json['message'] as String? ?? 'An unknown error occurred',
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      'code': code,
      'message': message,
    };
  }
}

/// Login request model.
class LoginRequest {
  final String username;
  final String password;
  
  LoginRequest({
    required this.username,
    required this.password,
  });
  
  factory LoginRequest.fromJson(Map<String, dynamic> json) {
    return LoginRequest(
      username: json['username'] as String,
      password: json['password'] as String,
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      'username': username,
      'password': password,
    };
  }
}

/// Login response model.
class LoginResponse {
  final String token;
  
  LoginResponse({
    required this.token,
  });
  
  factory LoginResponse.fromJson(Map<String, dynamic> json) {
    return LoginResponse(
      token: json['token'] as String,
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      'token': token,
    };
  }
}

/// Register request model.
class RegisterRequest {
  final String username;
  final String password;
  final String? role;
  
  RegisterRequest({
    required this.username,
    required this.password,
    this.role,
  });
  
  factory RegisterRequest.fromJson(Map<String, dynamic> json) {
    return RegisterRequest(
      username: json['username'] as String,
      password: json['password'] as String,
      role: json['role'] as String?,
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      'username': username,
      'password': password,
      if (role != null) 'role': role,
    };
  }
}

/// User response model.
class UserResponse {
  final int id;
  final String username;
  final String role;
  
  UserResponse({
    required this.id,
    required this.username,
    required this.role,
  });
  
  factory UserResponse.fromJson(Map<String, dynamic> json) {
    return UserResponse(
      id: json['id'] as int,
      username: json['username'] as String,
      role: json['role'] as String,
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'username': username,
      'role': role,
    };
  }
}

/// Item model.
class Item {
  final int? id;
  final String name;
  final String? description;
  
  Item({
    this.id,
    required this.name,
    this.description,
  });
  
  factory Item.fromJson(Map<String, dynamic> json) {
    return Item(
      id: json['id'] as int?,
      name: json['name'] as String,
      description: json['description'] as String?,
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      if (id != null) 'id': id,
      'name': name,
      if (description != null) 'description': description,
    };
  }
}

/// Create item request model.
class CreateItemRequest {
  final String name;
  final String? description;
  
  CreateItemRequest({
    required this.name,
    this.description,
  });
  
  factory CreateItemRequest.fromJson(Map<String, dynamic> json) {
    return CreateItemRequest(
      name: json['name'] as String,
      description: json['description'] as String?,
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      'name': name,
      if (description != null) 'description': description,
    };
  }
}

/// Update item request model.
class UpdateItemRequest {
  final String? name;
  final String? description;
  
  UpdateItemRequest({
    this.name,
    this.description,
  });
  
  factory UpdateItemRequest.fromJson(Map<String, dynamic> json) {
    return UpdateItemRequest(
      name: json['name'] as String?,
      description: json['description'] as String?,
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      if (name != null) 'name': name,
      if (description != null) 'description': description,
    };
  }
}

/// Transfer item request model.
class TransferItemRequest {
  final String newName;
  
  TransferItemRequest({
    required this.newName,
  });
  
  factory TransferItemRequest.fromJson(Map<String, dynamic> json) {
    return TransferItemRequest(
      newName: json['newName'] as String,
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      'newName': newName,
    };
  }
}

/// Paginated items model.
class PaginatedItems {
  final List<Item>? items;
  final int? page;
  final int? pageSize;
  final int? totalItems;
  final int? totalPages;
  final bool? hasNextPage;
  final bool? hasPreviousPage;
  
  PaginatedItems({
    this.items,
    this.page,
    this.pageSize,
    this.totalItems,
    this.totalPages,
    this.hasNextPage,
    this.hasPreviousPage,
  });
  
  factory PaginatedItems.fromJson(Map<String, dynamic> json) {
    return PaginatedItems(
      items: (json['items'] as List<dynamic>?)
          ?.map((e) => Item.fromJson(e as Map<String, dynamic>))
          .toList(),
      page: json['page'] as int?,
      pageSize: json['pageSize'] as int?,
      totalItems: json['totalItems'] as int?,
      totalPages: json['totalPages'] as int?,
      hasNextPage: json['hasNextPage'] as bool?,
      hasPreviousPage: json['hasPreviousPage'] as bool?,
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      if (items != null) 'items': items!.map((e) => e.toJson()).toList(),
      if (page != null) 'page': page,
      if (pageSize != null) 'pageSize': pageSize,
      if (totalItems != null) 'totalItems': totalItems,
      if (totalPages != null) 'totalPages': totalPages,
      if (hasNextPage != null) 'hasNextPage': hasNextPage,
      if (hasPreviousPage != null) 'hasPreviousPage': hasPreviousPage,
    };
  }
}

/// Generate text request model.
class GenerateTextRequest {
  final String prompt;
  
  GenerateTextRequest({
    required this.prompt,
  });
  
  factory GenerateTextRequest.fromJson(Map<String, dynamic> json) {
    return GenerateTextRequest(
      prompt: json['prompt'] as String,
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      'prompt': prompt,
    };
  }
}

/// Generate text response model.
class GenerateTextResponse {
  final String text;
  
  GenerateTextResponse({
    required this.text,
  });
  
  factory GenerateTextResponse.fromJson(Map<String, dynamic> json) {
    return GenerateTextResponse(
      text: json['text'] as String,
    );
  }
  
  Map<String, dynamic> toJson() {
    return {
      'text': text,
    };
  }
}
